Leetcode 36 Valid Soduko

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.

Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

bool isValidSudoku(vector<vector<char>>& board) {
        vector<int> b_row = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        vector<int> b_col = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        vector<int> b_blc = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') continue;
                int val = pow(2, board[i][j] - '0');
                
                if (b_row[i] & val) return false;
                b_row[i] += val;
                
                if (b_col[j] & val) return false;
                b_col[j] += val;
                
                int mod = (3 * (i / 3)) + (j / 3);
                if (b_blc[mod] & val) return false;
                b_blc[mod] += val; 
            }
        }
        return true;
    }
