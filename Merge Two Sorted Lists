/*
 21. Merge Two Sorted Lists
 Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

 Input: l1 = [1,2,4], l2 = [1,3,4]
 Output: [1,1,2,3,4,4]
 */

struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

ListNode* mergeTwoListsIterative(ListNode* l1, ListNode* l2) {
    ListNode dummy = ListNode(0);
    ListNode* ans = &dummy;
        
    while(l1 && l2){
        if(l1 -> val < l2 -> val){
            ans -> next = l1;
            l1 = l1 -> next;
        }
        else{
            ans -> next = l2;
            l2 = l2 -> next;
        }
        ans = ans -> next;
    }
        
    ans -> next = l1 ? l1 : l2;
        
    return dummy.next;
}

ListNode* mergeTwoListsRecursive(ListNode* l1, ListNode* l2) {
    if(!l1) return l2;
    if(!l2) return l1;
    
    if(l1->val < l2->val){
        l1->next = mergeTwoListsRecursive(l1->next, l2);
        return l1;
    }
    else{
        l2->next = mergeTwoListsRecursive(l1, l2->next);
        return l2;
    }
}
